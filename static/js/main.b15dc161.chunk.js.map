{"version":3,"sources":["container/CustomButton.tsx","container/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CustomButton","action","onClick","children","Button","inverted","color","className","theme","scheme","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","MainContainer","useState","setAction","input","setInput","output","setOutput","buildJsonParse","value","JSON","stringify","parse","error","console","log","Container","Grid","container","columns","Column","centered","mobile","tablet","computer","TextArea","rows","placeholder","onChange","e","data","List","verticalAlign","Item","bytes","utf8","encode","base64","buildEncode","decode","buildDecode","buildJsonTree","hideRoot","invertTheme","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b15dc161.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Button,\n  } from \"semantic-ui-react\";\n\ninterface IProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  action: string;\n}\n\nexport const CustomButton: React.FunctionComponent<IProps> = ({ action, children, onClick }) => {\n    return (\n        <Button\n            inverted\n            color='violet'\n            className=\"button\"\n            onClick={onClick}\n        >\n          {action}\n        </Button>\n      );    \n}\n","import React, { useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  List,\n  TextArea,\n} from \"semantic-ui-react\";\nimport JSONTree from \"react-json-tree\";\nimport base64 from \"base-64\";\nimport utf8 from \"utf8\";\nimport { CustomButton } from './CustomButton';\n\nconst theme = {\n  scheme: \"monokai\",\n  base00: \"#272822\",\n  base01: \"#383830\",\n  base02: \"#49483e\",\n  base03: \"#75715e\",\n  base04: \"#a59f85\",\n  base05: \"#f8f8f2\",\n  base06: \"#f5f4f1\",\n  base07: \"#f9f8f5\",\n  base08: \"#f92672\",\n  base09: \"#fd971f\",\n  base0A: \"#f4bf75\",\n  base0B: \"#a6e22e\",\n  base0C: \"#a1efe4\",\n  base0D: \"#66d9ef\",\n  base0E: \"#ae81ff\",\n  base0F: \"#cc6633\"\n};\n\nconst MainContainer = () => {\n\n  const [action, setAction] = useState(\"\");\n  const [input, setInput] = useState();\n  const [output, setOutput] = useState();\n\n  const buildJsonTree = (value: any) => {\n    try {\n      setOutput(JSON.parse(value))      \n    } catch (error) {\n      setOutput(\"\")\n    }\n  };\n\n  const buildJsonParse = (value: any) => {\n    try {\n      setOutput(JSON.stringify(JSON.parse(value), null, 2))\n    } catch (error) {\n      console.log(error)\n      setOutput(\"\")\n    }\n  };\n\n  const buildEncode = (value: any) => {\n    try {\n      const bytes = utf8.encode(value);\n      const encode = base64.encode(bytes);\n      setOutput(encode)        \n    } catch (error) {\n      console.log(error)\n      setOutput(\"\")\n    }\n  };\n\n  const buildDecode = (value: any) => {\n    try {\n      const decode = base64.decode(value);\n      buildJsonParse(decode)        \n    } catch (error) {\n      console.log(error)\n      setOutput(\"\")\n    }\n  };\n\n  return (\n    <Container>\n\n      <Grid container columns='equal'>\n\n        <Grid.Column centered=\"true\" mobile={16} tablet={16} computer={7} className=\"mainColumn\">\n          <TextArea rows={10} \n                    placeholder='Input value..' \n                    onChange={(e, data)=>{ setInput(data.value)} } \n                  />\n        </Grid.Column>\n\n        <Grid.Column centered=\"true\" mobile={16} tablet={16} computer={2}>\n\n          <List verticalAlign='middle'>\n          <List.Item>\n              <CustomButton \n                    action=\"encode\"\n                    onClick={e => {\n                      setAction('encode');\n                      buildEncode(input);\n                    }}/>\n            </List.Item>\n\n            <List.Item>\n              <CustomButton \n                    action=\"decode\"\n                    onClick={e => {\n                      setAction('decode');\n                      buildDecode(input);\n                    }}/>\n            </List.Item>\n\n            <List.Item>\n              <CustomButton \n                    action=\"jsonParse\"\n                    onClick={e => {\n                      setAction('jsonParse');\n                      buildJsonParse(input);\n                    }}/>\n            </List.Item>\n\n            <List.Item>\n              <CustomButton \n                action=\"jsonTree\"\n                onClick={e => {\n                  setAction('jsonTree');\n                  buildJsonTree(input);\n                }}/>\n            </List.Item>\n\n          </List>\n\n        </Grid.Column>\n\n        <Grid.Column centered=\"true\" mobile={16} tablet={16} computer={7}>\n          <Container className=\"ouputColumn\">\n\n              {action === 'jsonTree' && \n                <div><pre>\n                  <JSONTree\n                    hideRoot={true}\n                    data={output}\n                    theme={theme}\n                    invertTheme={true}\n                  />\n                </pre></div>\n              }\n\n              {(action === 'jsonParse' || action === 'encode' || action === 'decode') && \n                <div>\n                  <pre>{output}</pre>\n                </div>\n              }\n              \n          </Container>\n        </Grid.Column>\n      </Grid>\n\n    </Container>\n  );\n};\n\nexport default MainContainer;\n","import React, { Fragment } from \"react\";\nimport Main from \"./container/Main\";\n\nconst App: React.FC = () => {\n  return (\n    <Fragment>\n      <Main />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'semantic-ui-css/semantic.min.css'\nimport App from \"./App\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}