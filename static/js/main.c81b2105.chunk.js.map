{"version":3,"sources":["container/Utils.tsx","container/JsonRulesEngine.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","scheme","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","Utils","useState","action","setAction","input","setInput","output","setOutput","buildJsonParse","value","JSON","stringify","parse","error","console","message","Container","className","Grid","container","columns","Column","centered","mobile","tablet","computer","TextArea","rows","placeholder","spellCheck","onChange","e","data","List","verticalAlign","Item","Button","inverted","color","active","onClick","bytes","utf8","encode","base64","buildEncode","decode","buildDecode","buildJsonTree","Divider","hidden","text","hideRoot","invertTheme","JsonRulesEngine","activeItem","setActiveItem","rule","setRule","facts","setFacts","useEffect","runEngine","engine","Engine","addRule","run","then","results","events","map","event","type","Menu","secondary","name","App","pointing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c81b2105.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Grid, List, TextArea, Button, Divider } from \"semantic-ui-react\";\nimport JSONTree from \"react-json-tree\";\nimport base64 from \"base-64\";\nimport utf8 from \"utf8\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nconst theme = {\n  scheme: \"monokai\",\n  base00: \"#272822\",\n  base01: \"#383830\",\n  base02: \"#49483e\",\n  base03: \"#75715e\",\n  base04: \"#a59f85\",\n  base05: \"#f8f8f2\",\n  base06: \"#f5f4f1\",\n  base07: \"#f9f8f5\",\n  base08: \"#f92672\",\n  base09: \"#fd971f\",\n  base0A: \"#f4bf75\",\n  base0B: \"#a6e22e\",\n  base0C: \"#a1efe4\",\n  base0D: \"#66d9ef\",\n  base0E: \"#ae81ff\",\n  base0F: \"#cc6633\"\n};\n\nconst Utils = () => {\n\n  const [action, setAction] = useState(\"\");\n  const [input, setInput] = useState();\n  const [output, setOutput] = useState();\n\n  const buildJsonTree = (value: any) => {\n    try {\n      setOutput(JSON.parse(value));\n    } catch (error) {\n      console.error(error);\n      setOutput(error.message);\n    }\n  };\n\n  const buildJsonParse = (value: any) => {\n    try {\n      setOutput(JSON.stringify(JSON.parse(value), null, 2));\n    } catch (error) {\n      console.error(error);\n      setOutput(error.message);\n    }\n  };\n\n  const buildEncode = (value: any) => {\n    try {\n      const bytes = utf8.encode(value);\n      const encode = base64.encode(bytes);\n      setOutput(encode);\n    } catch (error) {\n      console.error(error);\n      setOutput(error.message);\n    }\n  };\n\n  const buildDecode = (value: any) => {\n    try {\n      const decode = base64.decode(value);\n      buildJsonParse(decode);\n    } catch (error) {\n      console.error(error);\n      setOutput(error.message);\n    }\n  };\n\n  return (\n    <Container className=\"main\">\n\n      <Grid container columns=\"equal\">\n        <Grid.Column\n          centered=\"true\"\n          mobile={16}\n          tablet={16}\n          computer={7}\n          className=\"mainColumn\"\n        >\n          <TextArea\n            className=\"textarea-1\"\n            rows={10}\n            placeholder=\"Input value..\"\n            spellCheck=\"false\"\n            onChange={(e, data) => {\n              setInput(data.value);\n            }}\n          />\n        </Grid.Column>\n\n        <Grid.Column centered=\"true\" mobile={16} tablet={16} computer={2}>\n          <List verticalAlign=\"middle\">\n            <List.Item>\n              <Button inverted color='violet' className=\"button\" active={action === 'encode'}\n                  onClick={e => {\n                    setAction(\"encode\");\n                    buildEncode(input);\n                  }}>\n                encode\n              </Button>\n            </List.Item>\n\n            <List.Item>\n              <Button inverted color='violet' className=\"button\" active={action === 'decode'}\n                  onClick={e => {\n                    setAction(\"decode\");\n                    buildDecode(input);\n                  }}>\n                decode\n              </Button>\n            </List.Item>\n\n            <List.Item>\n              <Button inverted color='violet' className=\"button\" active={action === 'jsonParse'}\n                    onClick={e => {\n                      setAction(\"jsonParse\");\n                      buildJsonParse(input);\n                    }}>\n                  jsonParse\n              </Button>\n            </List.Item>\n\n            <List.Item>\n              <Button inverted color='violet' className=\"button\" active={action === 'jsonTree'}\n                      onClick={e => {\n                        setAction(\"jsonTree\");\n                        buildJsonTree(input);\n                      }}>\n                    jsonTree\n              </Button>\n            </List.Item>\n\n            <Divider hidden />\n\n            <List.Item>\n              <CopyToClipboard text={output}>\n                <Button color='blue' className=\"button\">\n                  copy\n                </Button>\n              </CopyToClipboard>\n            </List.Item>\n          </List>\n        </Grid.Column>\n\n        <Grid.Column className=\"outputColumn\" centered=\"true\" mobile={16} tablet={16} computer={7}>\n          <Container>\n          <div>\n            {action === \"jsonTree\" && (\n                <pre>\n                  <JSONTree\n                    hideRoot={true}\n                    data={output}\n                    theme={theme}\n                    invertTheme={true}\n                  />\n                </pre>\n            )}\n\n            {action !== \"jsonTree\" && (\n                <pre>{output}</pre>\n            )}\n            </div>\n          </Container>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Utils;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Grid, TextArea, Menu } from \"semantic-ui-react\";\nimport { Engine } from 'json-rules-engine'\n\nconst JsonRulesEngine = () => {\n\n  const [activeItem, setActiveItem] = useState('tab1')\n\n  const [rule, setRule] = useState();\n  const [facts, setFacts] = useState();\n  const [output, setOutput] = useState();\n\n  useEffect(() => {\n    if(rule && facts){\n      runEngine();\n    }// eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [rule, facts]);\n\n  const runEngine = () => {\n    let engine = new Engine();\n    try {\n      setOutput('');\n      engine.addRule(JSON.parse(rule));\n      engine.run(JSON.parse(facts))\n        .then(results => {\n          results.events.map(event => setOutput(event.type))\n      })  \n    } catch (error) {\n      console.error(error);\n      setOutput(error.message);\n    }\n  }\n\n  return (\n    <Container className=\"main\">\n\n      <Grid container columns=\"equal\">\n        <Grid.Column className=\"outputColumn\"\n          centered=\"true\"\n          mobile={16}\n          tablet={16}\n          computer={12}\n        >\n          <Menu inverted secondary color=\"violet\">\n            <Menu.Item name=\"Rule\" \n                        active={activeItem === 'tab1'} \n                        onClick={(e) => {setActiveItem('tab1')}}/>\n            <Menu.Item name=\"Facts\" \n                        active={activeItem === 'tab2'}\n                        onClick={(e) => {setActiveItem('tab2')}}/>\n          </Menu>\n\n          {activeItem === 'tab1' &&\n            <TextArea\n                className=\"textarea-2\"\n                value={rule}\n                rows={10}\n                placeholder=\"Input rule..\"\n                spellCheck=\"false\"\n                onChange={(e, data) => {\n                  setRule(data.value);\n                }}\n            />\n          }\n          {activeItem === 'tab2' &&\n            <TextArea\n            className=\"textarea-2\"\n                value={facts}\n                rows={10}\n                placeholder=\"Input facts..\"\n                spellCheck=\"false\"\n                onChange={(e, data) => {\n                  setFacts(data.value);\n                }}\n            />\n          }          \n        </Grid.Column>\n\n        <Grid.Column className=\"outputColumn\" centered=\"true\" mobile={16} tablet={16} computer={4}>\n          <Container>\n          <div>\n              <pre>{output}</pre>\n          </div>\n          </Container>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default JsonRulesEngine;\n","import React, { Fragment, useState } from \"react\";\nimport { Menu } from 'semantic-ui-react'\nimport Utils from \"./container/Utils\";\nimport JsonRulesEngine from \"./container/JsonRulesEngine\"\n\nconst App: React.FC = () => {\n\n  const [activeItem, setActiveItem] = useState('tab1')\n\n  return (\n    <Fragment>\n        <Menu inverted pointing secondary>\n          <Menu.Item name=\"Utils\" \n                      active={activeItem === 'tab1'} \n                      onClick={(e) => {setActiveItem('tab1')}}/>\n          <Menu.Item name=\"Rules Engine\" \n                      active={activeItem === 'tab2'}\n                      onClick={(e) => {setActiveItem('tab2')}}/>\n        </Menu>\n\n        {activeItem === 'tab1' &&\n          <Utils />\n        }\n        {activeItem === 'tab2' &&\n          <JsonRulesEngine />\n        }\n\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'semantic-ui-css/semantic.min.css'\nimport App from \"./App\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}